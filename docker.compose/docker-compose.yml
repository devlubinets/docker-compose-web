version: "3.9"

#todo nginx setup, portal site error
services:
  portal-traefik:
    container_name: portal-${APP_NAME}
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.site.address=:${SITE_TCP_PORT}
    image: traefik:latest
    networks:
      api_driven:
    ports:
      - "80:80"
      - "8080:8080"
      - ${SITE_TCP_PORT}:${SITE_TCP_PORT}
    restart: unless-stopped
    volumes:
      - portal_volume:/acme
      - /var/run/docker.sock:/var/run/docker.sock:ro

  site:
    container_name: site-${APP_NAME}
    depends_on:
      - php
    image: nginx:stable-alpine
    labels:
      - traefik.enable=true
      - traefik.http.routers.site.rule=Host(`localhost`)
      - traefik.http.routers.site.entrypoints=site
      - traefik.http.services.svc_site.loadbalancer.server.port=${SITE_TCP_PORT}
    networks:
      api_driven:
    restart: unless-stopped
    volumes:
      - ../docker.sites/site.local:/usr/share/nginx/site.local
      - ./nginx/conf.d/site.local.conf:/etc/nginx/conf.d/site.local.conf:ro
    command: [nginx, '-g', 'daemon off;']
    hostname: site.local
    working_dir: /usr/share/nginx/site.local

  php:
    working_dir: /usr/share/nginx
    env_file:
      - .env
    container_name: php-${PHP_VERSION}-${APP_NAME}
    build:
      context: ..
      dockerfile: docker.compose/php/dev/${PHP_VERSION}/Dockerfile
    networks:
      api_driven:
    restart: unless-stopped
    volumes:
      - ../docker.sites/site.local:/usr/share/nginx/site.local
      - ./php/dev/${PHP_VERSION}/config:/usr/local/etc/php
      - ./common/.bashrc:/root/.bashrc
      - ./php/dev/${PHP_VERSION}/log:/var/www/log

  mysql:
    image: mysql:latest
    container_name: mysql-${APP_NAME}
    restart: always
    # NOTE: use of "mysql_native_password" is not recommended:
    # https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html#upgrade-caching-sha2-password
    # (this is just an example, not intended to be a production configuration)
    command: --default-authentication-plugin=mysql_native_password
    volumes:
      - ./mysql/dev/config:/etc/mysql/conf.d
      - portal_volume:/var/lib/mysql
    ports:
      - ${MYSQL_TCP_PORT}:${MYSQL_TCP_PORT}
    networks:
      api_driven:
    environment:
      MYSQL_DEBUG: ${MYSQL_DEBUG}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_TCP_PORT: ${MYSQL_TCP_PORT}
      MYSQL_REPLICATION_PORT: ${MYSQL_REPLICATION_PORT}

  adminer:
    image: adminer
    restart: always
    ports:
      - ${ADMINER_TCP_PORT}:${ADMINER_TCP_PORT}

  # The Unleash server contains the Unleash configuration and
  # communicates with server-side SDKs and the Unleash Proxy
#  web-unleash:
#    container_name: web-unleash-${APP_NAME}
#    image: unleashorg/unleash-server:latest
#    ports:
#      - "4242:4242"
#    environment:
#      # This points Unleash to its backing database (defined in the `db-unleash` section below)
#      DATABASE_URL: "postgres://postgres:unleash@db-unleash/postgres"
#      # Disable SSL for database connections. @chriswk: why do we do this?
#      DATABASE_SSL: "false"
#      # Changing log levels:
#      LOG_LEVEL: "warn"
#      # Proxy clients must use one of these keys to connect to the
#      # Proxy. To add more keys, separate them with a comma (`key1,key2`).
#      INIT_FRONTEND_API_TOKENS: "default:development.unleash-insecure-frontend-api-token"
#      # Initialize Unleash with a default set of client API tokens. To
#      # initialize Unleash with multiple tokens, separate them with a
#      # comma (`token1,token2`).
#      INIT_CLIENT_API_TOKENS: "default:development.unleash-insecure-api-token"
#    depends_on:
#      db-unleash:
#        condition: service_healthy
#    command: [ "node", "index.js" ]
#    healthcheck:
#      test: wget --no-verbose --tries=1 --spider http://localhost:4242/health || exit 1
#      interval: 1s
#      timeout: 1m
#      retries: 5
#      start_period: 15s
#    networks:
#      api_driven:
#
#  db-unleash:
#    container_name: db-unleash-${APP_NAME}
#    expose:
#      - "5432"
#    image: postgres:15
#    environment:
#      # create a database called `db`
#      POSTGRES_DB: "db"
#      # trust incoming connections blindly (DON'T DO THIS IN PRODUCTION!)
#      POSTGRES_HOST_AUTH_METHOD: "trust"
#    healthcheck:
#      test:
#        [
#          "CMD",
#          "pg_isready",
#          "--username=postgres",
#          "--host=127.0.0.1",
#          "--port=5432"
#        ]
#      interval: 2s
#      timeout: 1m
#      retries: 5
#      start_period: 10s
#    networks:
#      api_driven:

networks:
  api_driven:
    name: "api_driven"

volumes:
  portal_volume: